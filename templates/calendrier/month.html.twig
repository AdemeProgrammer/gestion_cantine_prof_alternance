{% extends 'base.html.twig' %}

{% block title %}Mois — {{ firstOfMonth|date('F Y', 'Europe/Paris')|capitalize }}{% endblock %}

{% block body %}
    <div class="container py-4">

        <div class="d-flex align-items-center justify-content-between mb-3">
            <div><a class="btn btn-outline-secondary btn-sm" href="{{ path('cal_month', { id: promo.id, y: prev.y, m: prev.m }) }}">&laquo; Mois précédent</a></div>
            <div class="text-center">
                <div class="h5 m-0">Promo {{ promo.anneeDebut }} - {{ promo.anneeFin }}</div>
                <div class="text-muted">{{ firstOfMonth|date('F Y', 'Europe/Paris')|capitalize }}</div>
            </div>
            <div><a class="btn btn-outline-secondary btn-sm" href="{{ path('cal_month', { id: promo.id, y: next.y, m: next.m }) }}">Mois suivant &raquo;</a></div>
        </div>

        <div class="table-responsive">
            <table class="table table-sm align-middle">
                <thead class="table-light">
                <tr>
                    <th class="text-nowrap">Professeur</th>
                    {% for i, d in businessDays %}
                        <th class="text-center text-nowrap">{{ weekdayNames[i]|slice(0,2)|capitalize }}<br>{{ d|date('d/m') }}</th>
                    {% endfor %}
                </tr>
                </thead>
                <tbody>

                {# Ligne des types (couleurs) #}
                <tr>
                    <td class="fw-normal text-muted">Type (BDD)</td>
                    {% for key in ymdKeys %}
                        {% set t = (typesMap[key] ?? '')|lower %}
                        {% set cls =
                            t in ['ferie','férié','ferié','ferme','fermé'] ? 'bg-danger' :
                            (t in ['vacances'] ? 'bg-warning text-dark' :
                            (t in ['ouvre','ouvré','ouvré','ouvrée'] ? 'bg-success' : 'bg-secondary'))
                        %}
                        <td class="text-center">
                            {% if t %}<span class="badge {{ cls }}">{{ t }}</span>{% else %}<span class="text-muted">–</span>{% endif %}
                        </td>
                    {% endfor %}
                </tr>

                {# Matrice : styles déduits au front (sans champ “prévu”) #}
                {% for row in rows %}
                    <tr>
                        <td class="text-nowrap">{{ row.prof.prenom }} {{ row.prof.nom }}</td>
                        {% for j, cell in row.cells %}
                            {% set calId = calIds[j] ?? null %}
                            {# prévu (expected=1) => fond clair ; exceptionnel (expected=0 & override) => bordure bleue ; retiré (expected=1 & override=0) => bordure rouge #}
                            {% set baseCls = cell.expected == 1 ? 'bg-light' : 'bg-white' %}
                            {% set borderCls =
                                (cell.expected == 0 and cell.hasOverride and cell.final == 1) ? 'border border-info' :
                                (cell.expected == 1 and cell.hasOverride and cell.final == 0) ? 'border border-danger' : '' %}
                            <td class="text-center {{ baseCls }} {{ borderCls }}">
                                {% if calId %}
                                    <input type="checkbox"
                                           class="form-check-input meal-toggle"
                                           data-cal-id="{{ calId }}"
                                           data-prof-id="{{ row.profId }}"
                                           {% if cell.final == 1 %}checked{% endif %} />
                                {% else %}
                                    <span class="text-muted">—</span>
                                {% endif %}
                            </td>
                        {% endfor %}
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="{{ businessDays|length + 1 }}" class="text-center text-muted py-4">
                            Aucun professeur actif lié à cette promo.
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>

        <div class="small text-muted mt-2">
            <span class="badge bg-light text-dark border"> </span> Prévu (Description)
            &nbsp;|&nbsp; <span class="badge border border-info"> </span> Ajout exceptionnel
            &nbsp;|&nbsp; <span class="badge border border-danger"> </span> Retiré
        </div>

        <div class="mt-3 d-flex gap-3">
            <a href="{{ path('cal_summary', { id: promo.id }) }}" class="btn btn-light">← Retour aux mois</a>
            <a href="{{ path('app_promo_index') }}" class="btn btn-link p-0">← Retour promotions</a>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const url = "{{ path('cal_save') }}";
            const token = "{{ csrf }}";

            document.querySelectorAll('.meal-toggle').forEach(cb => {
                cb.addEventListener('change', async (e) => {
                    const box = e.currentTarget;
                    const payload = {
                        calId: parseInt(box.dataset.calId, 10),
                        profId: parseInt(box.dataset.profId, 10),
                        value: !!box.checked,
                        _token: token
                    };

                    try {
                        const res = await fetch(url, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
                            body: JSON.stringify(payload)
                        });
                        const data = await res.json();
                        if (!res.ok || !data.ok) {
                            box.checked = !box.checked;
                            alert('Enregistrement impossible' + (data.error ? ' (' + data.error + ')' : ''));
                        }
                    } catch (err) {
                        box.checked = !box.checked;
                        alert('Erreur réseau, réessaie.');
                    }
                });
            });
        });
    </script>
{% endblock %}
